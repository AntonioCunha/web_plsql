// @flow

/*
*	Invoke the Oracle procedure and return the raw content of the page
*/

const oracledb = require('./oracle');
const {streamToBuffer} = require('./stream');
const fileUpload = require('./fileUpload');
const page = require('./page');
const RequestError = require('./requestError');
const ProcedureError = require('./procedureError');
const {Trace} = require('./trace');

import type {oracleExpressMiddleware$options} from './config';
import type {filesUploadType} from './fileUpload';

/**
* Invoke the Oracle procedure and return the page content
*
* @param {$Request} req - The req object represents the HTTP request.
* @param {$Response} res - The res object represents the HTTP response that an Express app sends when it gets an HTTP request.
* @param {Object} argObj - - The arguments of the procedure to invoke.
* @param {Object} cgiObj - The cgi of the procedure to invoke.
* @param {filesUploadType} filesToUpload - Array of files to be uploaded
* @param {oracleExpressMiddleware$options} options - the options for the middleware.
* @param {oracledb$connection} databaseConnection - Database connection.
* @param {Trace} trace - Tracing object.
* @returns {Promise<void>} - Promise resolving to the page content generated by the executed procedure
*/
module.exports = async function invokeProcedure(req: $Request, res: $Response, argObj: Object, cgiObj: Object, filesToUpload: filesUploadType, options: oracleExpressMiddleware$options, databaseConnection: oracledb$connection, trace: Trace): Promise<void> {
	trace.write('invokeProcedure: ENTER');

	const procedure = req.params.name;

	//
	// 1) UPLOAD FILES
	//

	trace.write(`invokeProcedure: upload "${filesToUpload.length}" files`);
	if (typeof options.doctable === 'string' && options.doctable.length > 0) {
		fileUpload.uploadFiles(filesToUpload, options.doctable, databaseConnection);
	}

	//
	// 2) GET SQL STATEMENT AND ARGUMENTS
	//

	let para;
	if (procedure.substring(0, 1) === '!') {
		trace.write('invokeProcedure: get variable arguments');
		para = await getVarArgsPara(procedure, argObj);
	} else {
		trace.write('invokeProcedure: get named arguments');
		para = await getFixArgsPara(procedure, argObj, databaseConnection);
	}

	//
	//	3) EXECUTE PROCEDURE
	//

	const HTBUF_LEN = 63;
	const MAX_IROWS = 100000;

	const cgi = {
		keys: Object.keys(cgiObj),
		values: Object.values(cgiObj)
	};

	const fileBlob = await databaseConnection.createLob(oracledb.BLOB);

	const bind = {
		cgicount: {dir: oracledb.BIND_IN, type: oracledb.NUMBER, val: cgi.keys.length},
		cginames: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: cgi.keys},
		cgivalues: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: cgi.values},
		htbuflen: {dir: oracledb.BIND_IN, type: oracledb.NUMBER, val: HTBUF_LEN},
		fileType: {dir: oracledb.BIND_OUT, type: oracledb.STRING},
		fileSize: {dir: oracledb.BIND_OUT, type: oracledb.NUMBER},
		fileBlob: {dir: oracledb.BIND_INOUT, type: oracledb.BLOB, val: fileBlob},
		lines: {dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: HTBUF_LEN * 2, maxArraySize: MAX_IROWS},
		irows: {dir: oracledb.BIND_INOUT, type: oracledb.NUMBER, val: MAX_IROWS}
	};

	// execute procedure and retrieve page
	const sqlStatement = getProcedureSQL(para.sql);
	let result;
	try {
		trace.write(`execute:\n${'-'.repeat(30)}\n${sqlStatement}\n${'-'.repeat(30)}\nwith bindings:\n${Trace.inspect(bind)}`);
		result = await databaseConnection.execute(sqlStatement, Object.assign(bind, para.bind));
		trace.write(`results:\n${Trace.inspect(result)}`);
	} catch (e) {
		const error = `Error when executing procedure\n${sqlStatement}\n${e.toString()}`;
		trace.write(error);
		throw new ProcedureError(error, cgiObj, para.sql, para.bind);
	}

	//
	//	4) PROCESS RESULTS
	//

	// Make sure that we have retrieved all the rows
	if (result.outBinds.irows > MAX_IROWS) {
		const error = `Error when tretrieving rows. irows="${result.outBinds.irows}"`;
		trace.write(error);
		throw new ProcedureError(error, cgiObj, para.sql, para.bind);
	}

	// combine page
	const pageContent = result.outBinds.lines.join('');
	trace.write(`PLAIN CONTENT:\n${'-'.repeat(30)}\n${pageContent}\n${'-'.repeat(30)}`);

	//
	//	6) PARSE PAGE
	//

	// parse what we received from PL/SQL
	const pageComponents = page.parse(pageContent);

	// add "Server" header
	pageComponents.head.server = cgiObj.SERVER_SOFTWARE;

	// add file download information
	pageComponents.file.fileType = result.outBinds.fileType;
	pageComponents.file.fileSize = result.outBinds.fileSize;
	pageComponents.file.fileBlob = result.outBinds.fileBlob !== null ? await streamToBuffer(result.outBinds.fileBlob) : null;

	trace.write(`PARSED CONTENT:\n${'-'.repeat(30)}\n${Trace.inspect(pageComponents)}\n${'-'.repeat(30)}`);

	//
	//	5) SEND THE RESPONSE
	//

	page.send(req, res, pageComponents, trace);

	//
	//	6) CLEANUP
	//

	await fileBlob.close();

	trace.write('invokeProcedure: EXIT');

	return Promise.resolve();
};

/*
* Get the SQL statement to execute when a new procedure is invoked
*/
function getProcedureSQL(procedure: string): string {
	return `
DECLARE
	fileType VARCHAR2(32767);
	fileSize INTEGER;
	fileBlob BLOB;
BEGIN
	-- Ensure a stateless environment by resetting package state (dbms_session.reset_package)
	dbms_session.modify_package_state(dbms_session.reinitialize);

	-- initialize the cgi
	owa.init_cgi_env(:cgicount, :cginames, :cgivalues);

	-- initialize the htp package
	htp.init;

	-- set the HTBUF_LEN
	htp.HTBUF_LEN := :htbuflen;

	-- execute the procedure
	BEGIN
		${procedure}
	EXCEPTION WHEN OTHERS THEN
		raise_application_error(-20000, 'Error executing ${procedure}'||CHR(10)||SUBSTR(dbms_utility.format_error_stack()||CHR(10)||dbms_utility.format_error_backtrace(), 1, 2000));
	END;

	-- Check for file download
	IF (wpg_docload.is_file_download()) THEN
		wpg_docload.get_download_file(fileType);
		IF (filetype = 'B') THEN
			wpg_docload.get_download_blob(:fileBlob);
			fileSize := dbms_lob.getlength(:fileBlob);
			--dbms_lob.copy(dest_lob=>:fileBlob, src_lob=>fileBlob, amount=>fileSize);
		END IF;
	END IF;
	:fileType := fileType;
	:fileSize := fileSize;

	-- retrieve the page
	owa.get_page(thepage=>:lines, irows=>:irows);
END;
`;
}

/*
* Get the sql statement and bindings for the procedure to execute for a variable number of arguments
*/
async function getVarArgsPara(procedure: string, argObj: Object): Promise<{sql: string, bind: oracledb$bindingType}> {
	const names = [];
	const values = [];

	for (const key in argObj) {
		const value = argObj[key];
		if (typeof value === 'string') {
			names.push(key);
			values.push(value);
		} else if (Array.isArray(value)) {
			value.forEach(item => {
				names.push(key);
				values.push(item);
			});
		}
	}

	return Promise.resolve({
		sql: procedure.substring(1) + '(:argnames, :argvalues);',
		bind: {
			argnames: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: names},
			argvalues: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: values}
		}
	});
}

/*
* Get the sql statement and bindings for the procedure to execute for a fixed number of arguments
*/
async function getFixArgsPara(procedure: string, argObj: Object, databaseConnection: oracledb$connection): Promise<{sql: string, bind: oracledb$bindingType}> {
	const bind = {};
	let index = 0;

	const argTypes = await getArguments(procedure, databaseConnection);

	// bindings for the statement
	let sql = procedure + '(';
	for (const key in argObj) {
		const value = argObj[key];
		const parameterName = 'p' + (index + 1).toString();

		// prepend the separator, if this is not the first argument
		if (index > 0) {
			sql += ',';
		}
		index++;

		// add the argument
		sql += key + '=>:' + parameterName;

		// add the binding
		bind[parameterName] = {dir: oracledb.BIND_IN, type: oracledb.STRING};

		// set the value or array of values
		if (Array.isArray(value) || argTypes[key] === 'PL/SQL TABLE') {
			bind[parameterName].val = [];
			if (typeof value === 'string') {
				bind[parameterName].val.push(value);
			} else {
				value.forEach(element => {
					bind[parameterName].val.push(element);
				});
			}
		} else if (typeof value === 'string') {
			bind[parameterName].val = value;
		}
	}
	sql += ');';

	return Promise.resolve({
		sql: sql,
		bind: bind
	});
}

/*
*	Retrieve the argument types for a given procedure to be executed.
*	This is important because if the procedure is defined to take a PL/SQL indexed table,
*	we must provise a table, even if there is only one argument to be submitted.
*/
async function getArguments(procedure: string, databaseConnection: oracledb$connection): Promise<{[string]: string}> {
	const sql = [
		'DECLARE',
		'	schemaName		VARCHAR2(32767);',
		'	part1			VARCHAR2(32767);',
		'	part2			VARCHAR2(32767);',
		'	dblink			VARCHAR2(32767);',
		'	objectType		NUMBER;',
		'	objectID		NUMBER;',
		'BEGIN',
		'	dbms_utility.name_resolve(name=>UPPER(:name), context=>1, schema=>schemaName, part1=>part1, part2=>part2, dblink=>dblink, part1_type=>objectType, object_number=>objectID);',
		'	IF (part1 IS NOT NULL) THEN',
		'		SELECT argument_name, data_type BULK COLLECT INTO :names, :types FROM all_arguments WHERE owner = schemaName AND package_name = part1 AND object_name = part2 AND argument_name IS NOT NULL ORDER BY overload, sequence;',
		'	ELSE',
		'		SELECT argument_name, data_type BULK COLLECT INTO :names, :types FROM all_arguments WHERE owner = schemaName AND package_name IS NULL AND object_name = part2 AND argument_name IS NOT NULL ORDER BY overload, sequence;',
		'	END IF;',
		'END;'
	];
	const MAX_PARAMETER_NUMBER = 1000;

	const bind = {
		name: {dir: oracledb.BIND_IN, type: oracledb.STRING, val: procedure},
		names: {dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: 60, maxArraySize: MAX_PARAMETER_NUMBER},
		types: {dir: oracledb.BIND_OUT, type: oracledb.STRING, maxSize: 60, maxArraySize: MAX_PARAMETER_NUMBER}
	};

	let result;

	try {
		result = await databaseConnection.execute(sql.join('\n'), bind);
	} catch (e) {
		const message = `Error when retrieving arguments\n${sql.join('\n')}\n${e.stack()}`;
		throw new RequestError(message);
	}

	const argTypes = {};
	if (typeof result !== 'object' || typeof result.outBinds !== 'object' || !Array.isArray(result.outBinds.names) || !Array.isArray(result.outBinds.types)) {
		throw new RequestError('getArguments: invalid results');
	}

	for (let i = 0; i < result.outBinds.names.length; i++) {
		argTypes[result.outBinds.names[i].toLowerCase()] = result.outBinds.types[i];
	}

	return Promise.resolve(argTypes);
}
